# Generated from /app/at_krl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,235,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,111,8,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,3,9,136,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        3,10,146,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,166,8,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,4,20,185,8,20,11,20,12,20,186,1,21,4,21,190,8,21,11,21,
        12,21,191,1,22,1,22,3,22,196,8,22,1,22,4,22,199,8,22,11,22,12,22,
        200,1,23,4,23,204,8,23,11,23,12,23,205,1,23,1,23,4,23,210,8,23,11,
        23,12,23,211,1,24,4,24,215,8,24,11,24,12,24,216,1,24,1,24,1,25,1,
        25,1,25,5,25,224,8,25,10,25,12,25,227,9,25,1,25,1,25,1,26,1,26,1,
        26,1,27,1,27,0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,0,55,0,1,0,8,2,0,33,33,126,126,
        3,0,65,90,97,122,1040,1103,4,0,48,57,65,90,97,122,1040,1103,5,0,
        48,57,65,90,95,95,97,122,1040,1103,1,0,48,57,3,0,9,10,13,13,32,32,
        4,0,10,10,13,13,34,34,92,92,9,0,34,34,39,39,48,48,92,92,98,98,102,
        102,110,110,114,114,116,116,272,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,
        0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,13,71,1,0,
        0,0,15,83,1,0,0,0,17,110,1,0,0,0,19,135,1,0,0,0,21,145,1,0,0,0,23,
        165,1,0,0,0,25,167,1,0,0,0,27,169,1,0,0,0,29,171,1,0,0,0,31,173,
        1,0,0,0,33,175,1,0,0,0,35,177,1,0,0,0,37,179,1,0,0,0,39,181,1,0,
        0,0,41,184,1,0,0,0,43,189,1,0,0,0,45,195,1,0,0,0,47,203,1,0,0,0,
        49,214,1,0,0,0,51,220,1,0,0,0,53,230,1,0,0,0,55,233,1,0,0,0,57,58,
        5,59,0,0,58,2,1,0,0,0,59,60,5,44,0,0,60,4,1,0,0,0,61,62,5,45,0,0,
        62,6,1,0,0,0,63,64,5,126,0,0,64,8,1,0,0,0,65,66,5,33,0,0,66,10,1,
        0,0,0,67,68,5,110,0,0,68,69,5,111,0,0,69,70,5,116,0,0,70,12,1,0,
        0,0,71,72,5,1059,0,0,72,73,5,1042,0,0,73,74,5,1045,0,0,74,75,5,1056,
        0,0,75,76,5,1045,0,0,76,77,5,1053,0,0,77,78,5,1053,0,0,78,79,5,1054,
        0,0,79,80,5,1057,0,0,80,81,5,1058,0,0,81,82,5,1068,0,0,82,14,1,0,
        0,0,83,84,5,1058,0,0,84,85,5,1054,0,0,85,86,5,1063,0,0,86,87,5,1053,
        0,0,87,88,5,1054,0,0,88,89,5,1057,0,0,89,90,5,1058,0,0,90,91,5,1068,
        0,0,91,16,1,0,0,0,92,111,5,38,0,0,93,94,5,38,0,0,94,111,5,38,0,0,
        95,96,5,97,0,0,96,97,5,110,0,0,97,111,5,100,0,0,98,111,5,124,0,0,
        99,100,5,124,0,0,100,111,5,124,0,0,101,102,5,111,0,0,102,111,5,114,
        0,0,103,111,7,0,0,0,104,105,5,110,0,0,105,106,5,111,0,0,106,111,
        5,116,0,0,107,108,5,120,0,0,108,109,5,111,0,0,109,111,5,114,0,0,
        110,92,1,0,0,0,110,93,1,0,0,0,110,95,1,0,0,0,110,98,1,0,0,0,110,
        99,1,0,0,0,110,101,1,0,0,0,110,103,1,0,0,0,110,104,1,0,0,0,110,107,
        1,0,0,0,111,18,1,0,0,0,112,136,5,61,0,0,113,114,5,61,0,0,114,136,
        5,61,0,0,115,116,5,101,0,0,116,136,5,113,0,0,117,136,5,62,0,0,118,
        119,5,103,0,0,119,136,5,116,0,0,120,121,5,62,0,0,121,136,5,61,0,
        0,122,123,5,103,0,0,123,136,5,101,0,0,124,136,5,60,0,0,125,126,5,
        108,0,0,126,136,5,116,0,0,127,128,5,60,0,0,128,136,5,61,0,0,129,
        130,5,108,0,0,130,136,5,101,0,0,131,132,5,60,0,0,132,136,5,62,0,
        0,133,134,5,110,0,0,134,136,5,101,0,0,135,112,1,0,0,0,135,113,1,
        0,0,0,135,115,1,0,0,0,135,117,1,0,0,0,135,118,1,0,0,0,135,120,1,
        0,0,0,135,122,1,0,0,0,135,124,1,0,0,0,135,125,1,0,0,0,135,127,1,
        0,0,0,135,129,1,0,0,0,135,131,1,0,0,0,135,133,1,0,0,0,136,20,1,0,
        0,0,137,146,5,43,0,0,138,139,5,97,0,0,139,140,5,100,0,0,140,146,
        5,100,0,0,141,146,5,45,0,0,142,143,5,115,0,0,143,144,5,117,0,0,144,
        146,5,98,0,0,145,137,1,0,0,0,145,138,1,0,0,0,145,141,1,0,0,0,145,
        142,1,0,0,0,146,22,1,0,0,0,147,166,5,42,0,0,148,149,5,109,0,0,149,
        150,5,117,0,0,150,166,5,108,0,0,151,166,5,47,0,0,152,153,5,100,0,
        0,153,154,5,105,0,0,154,166,5,118,0,0,155,166,5,37,0,0,156,157,5,
        109,0,0,157,158,5,111,0,0,158,166,5,100,0,0,159,166,5,94,0,0,160,
        161,5,42,0,0,161,166,5,42,0,0,162,163,5,112,0,0,163,164,5,111,0,
        0,164,166,5,119,0,0,165,147,1,0,0,0,165,148,1,0,0,0,165,151,1,0,
        0,0,165,152,1,0,0,0,165,155,1,0,0,0,165,156,1,0,0,0,165,159,1,0,
        0,0,165,160,1,0,0,0,165,162,1,0,0,0,166,24,1,0,0,0,167,168,5,46,
        0,0,168,26,1,0,0,0,169,170,5,40,0,0,170,28,1,0,0,0,171,172,5,41,
        0,0,172,30,1,0,0,0,173,174,5,91,0,0,174,32,1,0,0,0,175,176,5,93,
        0,0,176,34,1,0,0,0,177,178,5,123,0,0,178,36,1,0,0,0,179,180,5,125,
        0,0,180,38,1,0,0,0,181,182,7,1,0,0,182,40,1,0,0,0,183,185,3,55,27,
        0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,
        0,187,42,1,0,0,0,188,190,7,2,0,0,189,188,1,0,0,0,190,191,1,0,0,0,
        191,189,1,0,0,0,191,192,1,0,0,0,192,44,1,0,0,0,193,196,3,39,19,0,
        194,196,5,95,0,0,195,193,1,0,0,0,195,194,1,0,0,0,196,198,1,0,0,0,
        197,199,7,3,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,
        200,201,1,0,0,0,201,46,1,0,0,0,202,204,7,4,0,0,203,202,1,0,0,0,204,
        205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,
        209,3,25,12,0,208,210,7,4,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,
        209,1,0,0,0,211,212,1,0,0,0,212,48,1,0,0,0,213,215,7,5,0,0,214,213,
        1,0,0,0,215,216,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,218,
        1,0,0,0,218,219,6,24,0,0,219,50,1,0,0,0,220,225,5,34,0,0,221,224,
        8,6,0,0,222,224,3,53,26,0,223,221,1,0,0,0,223,222,1,0,0,0,224,227,
        1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,
        1,0,0,0,228,229,5,34,0,0,229,52,1,0,0,0,230,231,5,92,0,0,231,232,
        7,7,0,0,232,54,1,0,0,0,233,234,7,4,0,0,234,56,1,0,0,0,14,0,110,135,
        145,165,186,191,195,200,205,211,216,223,225,1,6,0,0
    ]

class at_krlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    BELIEF = 7
    ACCURACY = 8
    LOG_SIGN = 9
    COMP_SIGN = 10
    LOWP_MATH_SIGN = 11
    HIGHP_MATH_SIGN = 12
    DOT = 13
    L_BR = 14
    R_BR = 15
    LS_BR = 16
    RS_BR = 17
    LF_BR = 18
    RF_BR = 19
    LETTER = 20
    NUMERIC = 21
    ALPHANUMERIC = 22
    ALPHANUMERIC_U = 23
    FRAC = 24
    WS = 25
    STRING = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'-'", "'~'", "'!'", "'not'", "'\\u0423\\u0412\\u0415\\u0420\\u0415\\u041D\\u041D\\u041E\\u0421\\u0422\\u042C'", 
            "'\\u0422\\u041E\\u0427\\u041D\\u041E\\u0421\\u0422\\u042C'", 
            "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "BELIEF", "ACCURACY", "LOG_SIGN", "COMP_SIGN", "LOWP_MATH_SIGN", 
            "HIGHP_MATH_SIGN", "DOT", "L_BR", "R_BR", "LS_BR", "RS_BR", 
            "LF_BR", "RF_BR", "LETTER", "NUMERIC", "ALPHANUMERIC", "ALPHANUMERIC_U", 
            "FRAC", "WS", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "BELIEF", 
                  "ACCURACY", "LOG_SIGN", "COMP_SIGN", "LOWP_MATH_SIGN", 
                  "HIGHP_MATH_SIGN", "DOT", "L_BR", "R_BR", "LS_BR", "RS_BR", 
                  "LF_BR", "RF_BR", "LETTER", "NUMERIC", "ALPHANUMERIC", 
                  "ALPHANUMERIC_U", "FRAC", "WS", "STRING", "ESCAPE_CHAR", 
                  "DIGIT" ]

    grammarFileName = "at_krl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


